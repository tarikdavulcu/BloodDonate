// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart'
    show Firebase, FirebaseApp, FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyCRsZdeuvV9kRRU6K6Gg05F41qlL3RwcLk',
    appId: '1:21352098080:web:4cf4415902e1d0c7f08f45',
    messagingSenderId: '21352098080',
    projectId: 'blooddonor-0935',
    authDomain: 'blooddonor-0935.firebaseapp.com',
    databaseURL: 'https://blooddonor-0935-default-rtdb.firebaseio.com',
    storageBucket: 'blooddonor-0935.appspot.com',
    measurementId: 'G-N1WFNVFPGV',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyBAkoUi033jhQFmpTfVgf1Sqponzz8oHh0',
    appId: '1:21352098080:android:3a2b942a1d93cb7ef08f45',
    messagingSenderId: '21352098080',
    projectId: 'blooddonor-0935',
    databaseURL: 'https://blooddonor-0935-default-rtdb.firebaseio.com',
    storageBucket: 'blooddonor-0935.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyDCq7wSJ33zuaPpwHXpKXdn1bbrpYLlJPo',
    appId: '1:21352098080:ios:9b86a658e7f694b2f08f45',
    messagingSenderId: '21352098080',
    projectId: 'blooddonor-0935',
    databaseURL: 'https://blooddonor-0935-default-rtdb.firebaseio.com',
    storageBucket: 'blooddonor-0935.appspot.com',
    iosClientId:
        '21352098080-aklomc57dufo9opercfdn3oe57rt2obk.apps.googleusercontent.com',
    iosBundleId: 'com.example.kanbagisla',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyDCq7wSJ33zuaPpwHXpKXdn1bbrpYLlJPo',
    appId: '1:21352098080:ios:233388a9db448369f08f45',
    messagingSenderId: '21352098080',
    projectId: 'blooddonor-0935',
    databaseURL: 'https://blooddonor-0935-default-rtdb.firebaseio.com',
    storageBucket: 'blooddonor-0935.appspot.com',
    iosClientId:
        '21352098080-t53o8dik7i6522c98o7276si9jq028bi.apps.googleusercontent.com',
    iosBundleId: 'com.example.kanbagisla.RunnerTests',
  );
}

late final FirebaseAuth auth;
Future<User?> signInUsingEmailPassword({
  required String email,
  required String password,
  required BuildContext context,
}) async {
  FirebaseAuth auth = FirebaseAuth.instance;
  User? user;

  try {
    UserCredential userCredential = await auth.signInWithEmailAndPassword(
      email: email,
      password: password,
    );
    user = userCredential.user;
  } on FirebaseAuthException catch (e) {
    if (e.code == 'user-not-found') {
      print('No user found for that email.');
    } else if (e.code == 'wrong-password') {
      print('Wrong password provided.');
    }
  }

  return user;
}

Future<void> userCreate(String email, String password) async {
  auth.createUserWithEmailAndPassword(email: email, password: password);
}

Future<void> userStateControl(dynamic token) async {
  auth.authStateChanges().listen((User? user) {
    if (user == null) {
      print('User is currently signed out!');
    } else {
      print('User is signed in!');
    }
  });
}

Future<bool> userPasswordRecovery(String email) async {
  bool sending = false;
  auth.sendPasswordResetEmail(email: email);
  sending = true;
  return sending;
}

Future<void> userLogout() async {
  auth.signOut();
  print('User is logout');
}

Future<void> googleSignIn() async {
  GoogleSignIn googleSignIn = GoogleSignIn(
    scopes: [
      'email',
      'https://www.googleapis.com/auth/contacts.readonly',
    ],
  );

  try {
    await googleSignIn.signIn();
  } catch (error) {
    print(error);
  }

  print('GOOGLE SIGNIN');
}

class Authentication {
  static Future<User?> signInWithGoogle({required BuildContext context}) async {
    FirebaseAuth auth = FirebaseAuth.instance;
    User? user;

    if (kIsWeb) {
      GoogleAuthProvider authProvider = GoogleAuthProvider();

      try {
        final UserCredential userCredential =
            await auth.signInWithPopup(authProvider);

        user = userCredential.user;
      } catch (e) {
        print(e);
      }
    } else {
      final GoogleSignIn googleSignIn = GoogleSignIn();

      final GoogleSignInAccount? googleSignInAccount =
          await googleSignIn.signIn();

      if (googleSignInAccount != null) {
        final GoogleSignInAuthentication googleSignInAuthentication =
            await googleSignInAccount.authentication;

        final AuthCredential credential = GoogleAuthProvider.credential(
          accessToken: googleSignInAuthentication.accessToken,
          idToken: googleSignInAuthentication.idToken,
        );

        try {
          final UserCredential userCredential =
              await auth.signInWithCredential(credential);

          user = userCredential.user;
        } on FirebaseAuthException catch (e) {
          if (e.code == 'account-exists-with-different-credential') {
            // ...
          } else if (e.code == 'invalid-credential') {
            // ...
          }
        } catch (e) {
          // ...
        }
      }
    }
    return user;
  }
}
